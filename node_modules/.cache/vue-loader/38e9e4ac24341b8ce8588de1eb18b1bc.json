{"remainingRequest":"D:\\we_sub\\gf-vue-admin\\web\\node_modules\\_vue-loader@15.9.3@vue-loader\\lib\\index.js??vue-loader-options!D:\\we_sub\\gf-vue-admin\\web\\src\\view\\superAdmin\\authority\\components\\apis.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\we_sub\\gf-vue-admin\\web\\src\\view\\superAdmin\\authority\\components\\apis.vue","mtime":1599721582970},{"path":"D:\\we_sub\\gf-vue-admin\\web\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\we_sub\\gf-vue-admin\\web\\node_modules\\_babel-loader@8.1.0@babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\we_sub\\gf-vue-admin\\web\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\we_sub\\gf-vue-admin\\web\\node_modules\\_vue-loader@15.9.3@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgeyBnZXRBbGxBcGlzIH0gZnJvbSAnQC9hcGkvYXBpJw0KaW1wb3J0IHsgVXBkYXRlQ2FzYmluLCBnZXRQb2xpY3lQYXRoQnlBdXRob3JpdHlJZCB9IGZyb20gJ0AvYXBpL2Nhc2JpbicNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogJ0FwaXMnLA0KICBwcm9wczogew0KICAgIHJvdzogew0KICAgICAgZGVmYXVsdDogZnVuY3Rpb24oKSB7DQogICAgICAgIHJldHVybiB7fQ0KICAgICAgfSwNCiAgICAgIHR5cGU6IE9iamVjdA0KICAgIH0NCiAgfSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgYXBpVHJlZURhdGE6IFtdLA0KICAgICAgYXBpVHJlZUlkczogW10sDQogICAgICBuZWVkQ29uZmlybTpmYWxzZSwNCiAgICAgIGFwaURlZmF1bHRQcm9wczogew0KICAgICAgICBjaGlsZHJlbjogJ2NoaWxkcmVuJywNCiAgICAgICAgbGFiZWw6ICdkZXNjcmlwdGlvbicNCiAgICAgIH0NCiAgICB9DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICBub2RlQ2hhbmdlKCl7DQogICAgICB0aGlzLm5lZWRDb25maXJtID0gdHJ1ZQ0KICAgIH0sDQogICAgLy8g5pq06Zyy57uZ5aSW5bGC5L2/55So55qE5YiH5o2i5oum5oiq57uf5LiA5pa55rOVDQogICAgZW50ZXJBbmROZXh0KCl7DQogICAgICB0aGlzLmF1dGhBcGlFbnRlcigpDQogICAgfSwNCiAgICAvLyDliJvlu7phcGnmoJHmlrnms5UNCiAgICBidWlsZEFwaVRyZWUoYXBpcykgew0KICAgICAgY29uc3QgYXBpT2JqID0gbmV3IE9iamVjdCgpDQogICAgICBhcGlzICYmDQogICAgICAgIGFwaXMubWFwKGl0ZW0gPT4gew0KICAgICAgICBpdGVtLm9ubHlJZCA9ICJwOiIraXRlbS5wYXRoKyJtOiIraXRlbS5tZXRob2QNCiAgICAgICAgICBpZiAoYXBpT2JqLmhhc093blByb3BlcnR5KGl0ZW0uYXBpR3JvdXApKSB7DQogICAgICAgICAgICBhcGlPYmpbaXRlbS5hcGlHcm91cF0ucHVzaChpdGVtKQ0KICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBPYmplY3QuYXNzaWduKGFwaU9iaiwgeyBbaXRlbS5hcGlHcm91cF06IFtpdGVtXSB9KQ0KICAgICAgICAgIH0NCiAgICAgICAgfSkNCiAgICAgIGNvbnN0IGFwaVRyZWUgPSBbXQ0KICAgICAgZm9yIChjb25zdCBrZXkgaW4gYXBpT2JqKSB7DQogICAgICAgIGNvbnN0IHRyZWVOb2RlID0gew0KICAgICAgICAgIElEOiBrZXksDQogICAgICAgICAgZGVzY3JpcHRpb246IGtleSArICfnu4QnLA0KICAgICAgICAgIGNoaWxkcmVuOiBhcGlPYmpba2V5XQ0KICAgICAgICB9DQogICAgICAgIGFwaVRyZWUucHVzaCh0cmVlTm9kZSkNCiAgICAgIH0NCiAgICAgIHJldHVybiBhcGlUcmVlDQogICAgfSwNCiAgICAvLyDlhbPogZTlhbPns7vnoa7lrpoNCiAgICBhc3luYyBhdXRoQXBpRW50ZXIoKSB7DQogICAgICBjb25zdCBjaGVja0FyciA9IHRoaXMuJHJlZnMuYXBpVHJlZS5nZXRDaGVja2VkTm9kZXModHJ1ZSkNCiAgICAgIHZhciBjYXNiaW5JbmZvcyA9IFtdDQogICAgICBjaGVja0FyciYmY2hlY2tBcnIubWFwKGl0ZW09PnsNCiAgICAgICAgdmFyIGNhc2JpbkluZm8gPSB7DQogICAgICAgICAgcGF0aDppdGVtLnBhdGgsDQogICAgICAgICAgbWV0aG9kOml0ZW0ubWV0aG9kDQogICAgICAgIH0NCiAgICAgICAgY2FzYmluSW5mb3MucHVzaChjYXNiaW5JbmZvKQ0KICAgICAgfSkNCiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IFVwZGF0ZUNhc2Jpbih7DQogICAgICAgIGF1dGhvcml0eUlkOiB0aGlzLmFjdGl2ZVVzZXJJZCwNCiAgICAgICAgY2FzYmluSW5mb3MNCiAgICAgIH0pDQogICAgICBpZiAocmVzLmNvZGUgPT0gMCkgew0KICAgICAgICB0aGlzLiRtZXNzYWdlKHsgdHlwZTogJ3N1Y2Nlc3MnLCBtZXNzYWdlOiAiYXBp6K6+572u5oiQ5YqfIiB9KQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgYXN5bmMgY3JlYXRlZCgpIHsNCiAgICAvLyDojrflj5ZhcGnlubbmlbTnkIbmiJDmoJHnu5PmnoQNCiAgICBjb25zdCByZXMyID0gYXdhaXQgZ2V0QWxsQXBpcygpDQogICAgY29uc3QgYXBpcyA9IHJlczIuZGF0YS5hcGlzDQogICANCiAgICB0aGlzLmFwaVRyZWVEYXRhID0gdGhpcy5idWlsZEFwaVRyZWUoYXBpcykNCiAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRQb2xpY3lQYXRoQnlBdXRob3JpdHlJZCh7DQogICAgICBhdXRob3JpdHlJZDogdGhpcy5yb3cuYXV0aG9yaXR5SWQNCiAgICB9KQ0KICAgIHRoaXMuYWN0aXZlVXNlcklkID0gdGhpcy5yb3cuYXV0aG9yaXR5SWQNCiAgICB0aGlzLmFwaVRyZWVJZHMgPSBbXQ0KICAgIHJlcy5kYXRhLnBhdGhzJiZyZXMuZGF0YS5wYXRocy5tYXAoaXRlbT0+ew0KICAgICAgdGhpcy5hcGlUcmVlSWRzLnB1c2goInA6IitpdGVtLnBhdGgrIm06IitpdGVtLm1ldGhvZCkNCiAgICB9KQ0KICB9DQp9DQo="},{"version":3,"sources":["apis.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"apis.vue","sourceRoot":"src/view/superAdmin/authority/components","sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"clearflex\">\r\n      <el-button @click=\"authApiEnter\" class=\"fl-right\" size=\"small\" type=\"primary\">确 定</el-button>\r\n    </div>\r\n    <el-tree\r\n      :data=\"apiTreeData\"\r\n      :default-checked-keys=\"apiTreeIds\"\r\n      :props=\"apiDefaultProps\"\r\n      @check=\"nodeChange\"\r\n      default-expand-all\r\n      highlight-current\r\n      node-key=\"onlyId\"\r\n      ref=\"apiTree\"\r\n      show-checkbox\r\n    ></el-tree>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { getAllApis } from '@/api/api'\r\nimport { UpdateCasbin, getPolicyPathByAuthorityId } from '@/api/casbin'\r\nexport default {\r\n  name: 'Apis',\r\n  props: {\r\n    row: {\r\n      default: function() {\r\n        return {}\r\n      },\r\n      type: Object\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      apiTreeData: [],\r\n      apiTreeIds: [],\r\n      needConfirm:false,\r\n      apiDefaultProps: {\r\n        children: 'children',\r\n        label: 'description'\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    nodeChange(){\r\n      this.needConfirm = true\r\n    },\r\n    // 暴露给外层使用的切换拦截统一方法\r\n    enterAndNext(){\r\n      this.authApiEnter()\r\n    },\r\n    // 创建api树方法\r\n    buildApiTree(apis) {\r\n      const apiObj = new Object()\r\n      apis &&\r\n        apis.map(item => {\r\n        item.onlyId = \"p:\"+item.path+\"m:\"+item.method\r\n          if (apiObj.hasOwnProperty(item.apiGroup)) {\r\n            apiObj[item.apiGroup].push(item)\r\n          } else {\r\n            Object.assign(apiObj, { [item.apiGroup]: [item] })\r\n          }\r\n        })\r\n      const apiTree = []\r\n      for (const key in apiObj) {\r\n        const treeNode = {\r\n          ID: key,\r\n          description: key + '组',\r\n          children: apiObj[key]\r\n        }\r\n        apiTree.push(treeNode)\r\n      }\r\n      return apiTree\r\n    },\r\n    // 关联关系确定\r\n    async authApiEnter() {\r\n      const checkArr = this.$refs.apiTree.getCheckedNodes(true)\r\n      var casbinInfos = []\r\n      checkArr&&checkArr.map(item=>{\r\n        var casbinInfo = {\r\n          path:item.path,\r\n          method:item.method\r\n        }\r\n        casbinInfos.push(casbinInfo)\r\n      })\r\n      const res = await UpdateCasbin({\r\n        authorityId: this.activeUserId,\r\n        casbinInfos\r\n      })\r\n      if (res.code == 0) {\r\n        this.$message({ type: 'success', message: \"api设置成功\" })\r\n      }\r\n    }\r\n  },\r\n  async created() {\r\n    // 获取api并整理成树结构\r\n    const res2 = await getAllApis()\r\n    const apis = res2.data.apis\r\n   \r\n    this.apiTreeData = this.buildApiTree(apis)\r\n    const res = await getPolicyPathByAuthorityId({\r\n      authorityId: this.row.authorityId\r\n    })\r\n    this.activeUserId = this.row.authorityId\r\n    this.apiTreeIds = []\r\n    res.data.paths&&res.data.paths.map(item=>{\r\n      this.apiTreeIds.push(\"p:\"+item.path+\"m:\"+item.method)\r\n    })\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\n</style>"]}]}