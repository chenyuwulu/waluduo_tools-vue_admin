{"remainingRequest":"D:\\we_sub\\gf-vue-admin\\web\\node_modules\\_babel-loader@8.1.0@babel-loader\\lib\\index.js!D:\\we_sub\\gf-vue-admin\\web\\node_modules\\_eslint-loader@2.2.1@eslint-loader\\index.js??ref--13-0!D:\\we_sub\\gf-vue-admin\\web\\src\\permission.js","dependencies":[{"path":"D:\\we_sub\\gf-vue-admin\\web\\src\\permission.js","mtime":1601342948867},{"path":"D:\\we_sub\\gf-vue-admin\\web\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\we_sub\\gf-vue-admin\\web\\node_modules\\_babel-loader@8.1.0@babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\we_sub\\gf-vue-admin\\web\\node_modules\\_eslint-loader@2.2.1@eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiRDovd2Vfc3ViL2dmLXZ1ZS1hZG1pbi93ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJEOi93ZV9zdWIvZ2YtdnVlLWFkbWluL3dlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCByb3V0ZXIgZnJvbSAnLi9yb3V0ZXInOwppbXBvcnQgeyBzdG9yZSB9IGZyb20gJ0Avc3RvcmUvaW5kZXgnOwp2YXIgYXN5bmNSb3V0ZXJGbGFnID0gMDsKdmFyIHdoaXRlTGlzdCA9IFsnbG9naW4nLCAncmVnaXN0ZXInXTsKcm91dGVyLmJlZm9yZUVhY2goIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUodG8sIGZyb20sIG5leHQpIHsKICAgIHZhciB0b2tlbiwgYXN5bmNSb3V0ZXJzOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICB0b2tlbiA9IHN0b3JlLmdldHRlcnNbJ3VzZXIvdG9rZW4nXTsgLy8g5Zyo55m95ZCN5Y2V5Lit55qE5Yik5pat5oOF5Ya1CgogICAgICAgICAgICBpZiAoISh3aGl0ZUxpc3QuaW5kZXhPZih0by5uYW1lKSA+IC0xKSkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodG9rZW4pIHsKICAgICAgICAgICAgICBuZXh0KHsKICAgICAgICAgICAgICAgIHBhdGg6ICcvbGF5b3V0L2Rhc2hib2FyZCcKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBuZXh0KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNzsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBpZiAoIXRva2VuKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE2OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoYXN5bmNSb3V0ZXJGbGFnKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE1OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBhc3luY1JvdXRlckZsYWcrKzsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEwOwogICAgICAgICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goJ3JvdXRlci9TZXRBc3luY1JvdXRlcicpOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgIGFzeW5jUm91dGVycyA9IHN0b3JlLmdldHRlcnNbJ3JvdXRlci9hc3luY1JvdXRlcnMnXTsKICAgICAgICAgICAgcm91dGVyLmFkZFJvdXRlcyhhc3luY1JvdXRlcnMpOwogICAgICAgICAgICBuZXh0KF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdG8pLCB7fSwgewogICAgICAgICAgICAgIHJlcGxhY2U6IHRydWUKICAgICAgICAgICAgfSkpOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTY7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgIG5leHQoKTsKCiAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAvLyDkuI3lnKjnmb3lkI3ljZXkuK3lubbkuJTmnKrnmbvpmYbnmoTml7blgJkKICAgICAgICAgICAgaWYgKCF0b2tlbikgewogICAgICAgICAgICAgIG5leHQoewogICAgICAgICAgICAgICAgbmFtZTogImxvZ2luIiwKICAgICAgICAgICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICAgICAgICAgIHJlZGlyZWN0OiBkb2N1bWVudC5sb2NhdGlvbi5oYXNoCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfeCwgX3gyLCBfeDMpIHsKICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpKTs="},{"version":3,"sources":["D:/we_sub/gf-vue-admin/web/src/permission.js"],"names":["router","store","asyncRouterFlag","whiteList","beforeEach","to","from","next","token","getters","indexOf","name","path","dispatch","asyncRouters","addRoutes","replace","query","redirect","document","location","hash"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,KAAT,QAAsB,eAAtB;AAEA,IAAIC,eAAe,GAAG,CAAtB;AAEA,IAAMC,SAAS,GAAG,CAAC,OAAD,EAAU,UAAV,CAAlB;AAEAH,MAAM,CAACI,UAAP;AAAA,qEAAkB,iBAAMC,EAAN,EAAUC,IAAV,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,YAAAA,KADQ,GACAP,KAAK,CAACQ,OAAN,CAAc,YAAd,CADA,EAEV;;AAFU,kBAGVN,SAAS,CAACO,OAAV,CAAkBL,EAAE,CAACM,IAArB,IAA6B,CAAC,CAHpB;AAAA;AAAA;AAAA;;AAIV,gBAAIH,KAAJ,EAAW;AACPD,cAAAA,IAAI,CAAC;AAAEK,gBAAAA,IAAI,EAAE;AAAR,eAAD,CAAJ;AACH,aAFD,MAEO;AACHL,cAAAA,IAAI;AACP;;AARS;AAAA;;AAAA;AAAA,iBAWNC,KAXM;AAAA;AAAA;AAAA;;AAAA,gBAaDN,eAbC;AAAA;AAAA;AAAA;;AAcFA,YAAAA,eAAe;AAdb;AAAA,mBAeID,KAAK,CAACY,QAAN,CAAe,uBAAf,CAfJ;;AAAA;AAgBIC,YAAAA,YAhBJ,GAgBmBb,KAAK,CAACQ,OAAN,CAAc,qBAAd,CAhBnB;AAiBFT,YAAAA,MAAM,CAACe,SAAP,CAAiBD,YAAjB;AACAP,YAAAA,IAAI,iCAAKF,EAAL;AAASW,cAAAA,OAAO,EAAE;AAAlB,eAAJ;AAlBE;AAAA;;AAAA;AAoBFT,YAAAA,IAAI;;AApBF;AAuBV;AACA,gBAAI,CAACC,KAAL,EAAY;AACRD,cAAAA,IAAI,CAAC;AACDI,gBAAAA,IAAI,EAAE,OADL;AAEDM,gBAAAA,KAAK,EAAE;AACHC,kBAAAA,QAAQ,EAAEC,QAAQ,CAACC,QAAT,CAAkBC;AADzB;AAFN,eAAD,CAAJ;AAMH;;AA/BS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import router from './router'\r\nimport { store } from '@/store/index'\r\n\r\nlet asyncRouterFlag = 0\r\n\r\nconst whiteList = ['login', 'register']\r\n\r\nrouter.beforeEach(async(to, from, next) => {\r\n    const token = store.getters['user/token']\r\n        // 在白名单中的判断情况\r\n    if (whiteList.indexOf(to.name) > -1) {\r\n        if (token) {\r\n            next({ path: '/layout/dashboard' })\r\n        } else {\r\n            next()\r\n        }\r\n    } else {\r\n        // 不在白名单中并且已经登陆的时候\r\n        if (token) {\r\n            // 添加flag防止多次获取动态路由和栈溢出\r\n            if (!asyncRouterFlag) {\r\n                asyncRouterFlag++\r\n                await store.dispatch('router/SetAsyncRouter')\r\n                const asyncRouters = store.getters['router/asyncRouters']\r\n                router.addRoutes(asyncRouters)\r\n                next({...to, replace: true })\r\n            } else {\r\n                next()\r\n            }\r\n        }\r\n        // 不在白名单中并且未登陆的时候\r\n        if (!token) {\r\n            next({\r\n                name: \"login\",\r\n                query: {\r\n                    redirect: document.location.hash\r\n                }\r\n            })\r\n        }\r\n    }\r\n})"]}]}